#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 ESCAPE>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                   &kp T                                                         &kp Y      &kp U  &kp I      &kp O       &kp P
&kp A             &kp S         &kp D         &kp F                   &kp G        &kp C_MUTE                  &kp ESCAPE           &kp H      &kp J  &kp K      &kp L       &kp MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                   &kp B        &trans                      &lt_to_layer_0 6 AT  &kp N      &kp M  &kp COMMA  &kp PERIOD  &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 1 LANG2  &lt 2 SPACE  &lt_to_layer_0 3 LANG1      &kp BACKSPACE        &kp ENTER                                &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_DOWN C_VOLUME_UP>;
        };

        kigou {
            bindings = <
&trans          &trans  &trans  &trans  &trans                                  &kp AMPERSAND      &kp EXCLAMATION  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SQT
&trans          &trans  &trans  &trans  &trans  &kp INT_YEN      &kp COLON      &kp DOUBLE_QUOTES  &kp DOLLAR       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PERCENT
&kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &kp HASH         &kp SEMICOLON  &kp LEFT_BRACE     &kp RIGHT_BRACE  &kp LESS_THAN         &kp GREATER_THAN       &kp QUESTION
&trans          &trans  &trans  &trans  &trans  &trans           &trans         &trans                                                                           &kp HASH
            >;
        };

        NUM {
            bindings = <
&kp MINUS       &kp KP_NUMBER_7  &kp UP_ARROW  &kp KP_NUMBER_9  &kp PLUS                                                       &kp KP_SLASH     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_MINUS
&kp SLASH       &kp LEFT         &kp DOWN      &kp RIGHT        &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp KP_EQUAL_AS400  &kp KP_ASTERISK  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_PLUS
&kp LEFT_SHIFT  &kp KP_NUMBER_1  &kp TAB       &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &kp EQUAL           &kp KP_DOT       &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp ENTER
&trans          &trans           &trans        &kp LANGUAGE_2   &to 0         &kp LANG1                    &kp BACKSPACE       &kp KP_NUMBER_0                                                     &kp TAB
            >;
        };

        ARROW {
            bindings = <
&kp F1          &kp F2                  &kp F3        &kp F4                   &kp F5                               &kp ESCAPE  &trans    &kp UP_ARROW  &trans     &trans
&kp F6          &kp F7                  &kp F8        &kp F9                   &kp F10  &trans       &trans         &kp HOME    &kp LEFT  &kp DOWN      &kp RIGHT  &kp END
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &kp K_MUTE    &kp LG(LS(RIGHT_ARROW))  &kp F11  &kp F12      &trans         &trans      &trans    &kp TAB       &trans     &trans
&kp LCTRL       &trans                  &kp LEFT_ALT  &trans                   &to 0    &trans       &kp BACKSPACE  &to 0                                          &kp DEL
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        MOUSE {
            bindings = <
&trans            &trans  &trans  &trans  &trans                                                                &trans  &trans    &kp LG(D)                 &kp LG(TAB)  &trans
&kp A             &trans  &trans  &trans  &trans                       &trans                           &trans  &trans  &mkp MB1  &lt_to_layer_0 5 LC(TAB)  &mkp MB2     &kp LG(D)
&mt LEFT_SHIFT Z  &kp X   &kp C   &kp V   &trans                       &trans                           &trans  &trans  &mkp MB4  &kp LC(C)                 &kp LC(V)    &kp LS(LC(V))
&kp LCTRL         &trans  &trans  &trans  &lt_to_layer_0 2 LANGUAGE_1  &lt_to_layer_0 3 LANGUAGE_1      &trans  &to 0                                                    &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp K_VOLUME_DOWN K_VOLUME_UP>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
